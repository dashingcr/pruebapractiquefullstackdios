 
2 changes: 2 additions & 0 deletions
2  
.gitattributes


		@@ -0,0 +1,2 @@
	
# Auto detect text files and perform LF normalization
	
* text=auto
 
15 changes: 15 additions & 0 deletions
15  
.gitignore


		@@ -0,0 +1,23 @@
	
# See https://help.github.com/ignore-files/ for more about ignoring files.
	

	
# dependencies
	
/node_modules
	

	
# testing
	
/coverage
	

	
# production
	
/build
	

	
# misc
	
.DS_Store
	
.env.local
	
.env.development.local
	
.env.test.local
	
.env.production.local
	

	
npm-debug.log*
	
yarn-debug.log*
	
yarn-error.log*
	
node_modules
	
node_modules
 
2,486 changes: 2,486 additions & 0 deletions
2,486  
README.md





Load diff
Large diffs are not rendered by default.
 
10,837 changes: 10,837 additions & 0 deletions
10,837  
package-lock.json



Load diff
Large diffs are not rendered by default.
 
17 changes: 17 additions & 0 deletions
17  
package.json


		@@ -0,0 +1,17 @@
	
{
	
  "name": "coin-app",
	
  "version": "0.1.1",
	
  "private": true,
	
  "dependencies": {
	
    "bootstrap": "^3.3.7",
	
    "react": "^16.5.2",
	
    "react-dom": "^16.5.2",
	
    "react-scripts": "1.1.5"
	
  },
	
  "scripts": {
	
    "start": "react-scripts start",
	
    "build": "react-scripts build",
	
    "test": "react-scripts test --env=jsdom",
	
    "eject": "react-scripts eject"
	
  }
	
}
 
Binary file added
BIN +3.78 KB 
public/favicon.ico


Binary file not shown.
 
40 changes: 40 additions & 0 deletions
40  
public/index.html


		@@ -0,0 +1,40 @@
	
<!DOCTYPE html>
	
<html lang="en">
	
  <head>
	
    <meta charset="utf-8">
	
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
	
    <meta name="theme-color" content="#000000">
	
    <!--
	
      manifest.json provides metadata used when your web app is added to the
	
      homescreen on Android. See https://developers.google.com/web/fundamentals/engage-and-retain/web-app-manifest/
	
    -->
	
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json">
	
    <link rel="shortcut icon" href="%PUBLIC_URL%/favicon.ico">
	
    <!--
	
      Notice the use of %PUBLIC_URL% in the tags above.
	
      It will be replaced with the URL of the `public` folder during the build.
	
      Only files inside the `public` folder can be referenced from the HTML.
	

	
      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
	
      work correctly both with client-side routing and a non-root public URL.
	
      Learn how to configure a non-root public URL by running `npm run build`.
	
    -->
	
    <title>React App</title>
	
  </head>
	
  <body>
	
    <noscript>
	
      You need to enable JavaScript to run this app.
	
    </noscript>
	
    <div id="root"></div>
	
    <!--
	
      This HTML file is a template.
	
      If you open it directly in the browser, you will see an empty page.
	

	
      You can add webfonts, meta tags, or analytics to this file.
	
      The build step will place the bundled scripts into the <body> tag.
	

	
      To begin the development, run `npm start` or `yarn start`.
	
      To create a production bundle, use `npm run build` or `yarn build`.
	
    -->
	
  </body>
	
</html>
 
15 changes: 15 additions & 0 deletions
15  
public/manifest.json


		@@ -0,0 +1,15 @@
	
{
	
  "short_name": "React App",
	
  "name": "Create React App Sample",
	
  "icons": [
	
    {
	
      "src": "favicon.ico",
	
      "sizes": "64x64 32x32 24x24 16x16",
	
      "type": "image/x-icon"
	
    }
	
  ],
	
  "start_url": "./index.html",
	
  "display": "standalone",
	
  "theme_color": "#000000",
	
  "background_color": "#ffffff"
	
}
 
127 changes: 127 additions & 0 deletions
127  
src/App.css


		@@ -0,0 +1,127 @@
	
@import url('https://fonts.googleapis.com/css?family=Merricoin:100,200,300,300i,400,400i,700');
	
@import url('https://fonts.googleapis.com/css?family=Roboto+Slab:400,700');
	
@import url('https://fonts.googleapis.com/css?family=Open+Sans:300,400');
	

	
body {
	
  font-family: "Open Sans", serif;
	
}
	

	
.wrapper {
	
  background: linear-gradient(to right, #e67e22, #e74c3c);
	
  height: 100vh;
	
  display: flex;
	
  justify-content: center;
	
  align-items: center;
	
}
	

	
.main {
	
  height: 90vh;
	
  background: #fff;
	
  box-shadow: 0px 13px 40px -13px rgba(0,0,0,0.75);
	
  width: 60%;
	
  margin: 0 auto;
	
}
	

	
.title-container {
	
  height: 90vh;
	
  background: url('img/liveweave-image.svg')  center center  no-repeat;
	
  background-size: cover;
	
  display: flex;
	
  align-items: center;
	
  justify-content: center;
	
  text-align: center;
	
  color: #000;
	
}
	

	
.title-container__title {
	
  font-size: 50px;
	
  letter-spacing: 2px;
	
  line-height: 1.3;
	
  font-family: 'Roboto Slab', serif;
	
}
	

	
.title-container__subtitle {
	
  font-style: italic;
	
  font-weight: 100;
	
  letter-spacing: 1px;
	
  line-height: 1.5;
	
  font-family: "Merricoin", serif;
	
}
	

	
.form-container {
	
  background-color: #2c3e50;
	
  height: 90vh;
	
  padding-top: 100px;
	
  padding-left: 50px;
	
}
	

	
input[type="text"] {
	
  background-color: transparent;
	
  border: 0;
	
  border-bottom: solid 1px #f16051;
	
  width: 30%;
	
  padding-bottom: 4px;
	
  color: #fff !important;
	
  font-weight: lighter;
	
  letter-spacing: 2px;
	
  margin-bottom: 30px;
	
  margin-right: 20px;
	
  font-size: 20px;
	
}
	

	
input[type="text"] { 
	
    outline: none;
	
}
	

	
input:-webkit-autofill {
	
    -webkit-box-shadow: 0 0 0 30px #2c3e50 inset;
	
    -webkit-text-fill-color: #fff !important;
	
}
	

	
button {
	
  border: 0;
	
  padding: 8px 20px;
	
  margin: 0 2px;
	
  border-radius: 2px;
	
  font-weight: lighter;
	
  letter-spacing: 1px;
	
  font-size: 15px;
	
  cursor: pointer;
	
  background-color: #f16051;
	
  color: #fff;
	
  font-weight: 100;
	
}
	

	
button:active {
	
  outline: none;
	
}
	

	
.coin__info {
	
  width: 60%;
	
  font-size: 20px;
	
  font-weight: 200;
	
  letter-spacing: 2px;
	
}
	

	
.coin__key {
	
  color: #f16051;
	
  border-bottom: solid 2px rgba(255,255,255,0.06);
	
  padding: 20px 0 20px 0;
	
  font-weight: 400;
	
}
	

	
.coin__key:last-child {
	
  border: 0;
	
}
	

	
.coin__value {
	
  color: #fff;
	
  font-weight: 200;
	
}
	

	
.coin__error {
	
  color: #f16051;
	
  font-size: 20px;
	
  letter-spacing: 1px;
	
  font-weight: 200;
	
}
 
72 changes: 72 additions & 0 deletions
72  
src/App.js


		@@ -0,0 +1,72 @@
	
import React from "react";
	

	
import Title from "./components/Title";
	
import Form from "./components/Form";
	
import Coin from "./components/Coin";
	

	
class App extends React.Component {
	
  state = {
	
    price: undefined,
	
    percentage: undefined,
	
    low: undefined,
	
    high: undefined,
	
    error: undefined
	
  }
	

	
  getCoin = async (e) => {
	
    e.preventDefault();
	
    const coin = e.target.elements.coin.value;
	
    const currency = e.target.elements.currency.value;
	
    const api_call = await fetch(`https://min-api.cryptocompare.com/data/pricemultifull?fsyms=${coin}&tsyms=${currency}`);
	
    const data = await api_call.json();
	
    console.log(data);
	
    if (coin && currency) {
	
      this.setState({
	
        price: data['DISPLAY'][coin][currency]['PRICE'],
	
        percentage: data['DISPLAY'][coin][currency]['CHANGEPCT24HOUR'],
	
        low: data['DISPLAY'][coin][currency]['LOWDAY'],
	
        high: data['DISPLAY'][coin][currency]['HIGHDAY'],
	
        error: ""
	
      });
	
    } else {
	
      this.setState({
	
        price: undefined,
	
        percentage: undefined,
	
        low: undefined,
	
        high: undefined,
	
        error: "Please enter the values"
	
      });
	
    }
	
  }
	

	

	
  render() {
	
    return(
	
      <div>
	
      <div className="wrapper">
	
          <div className="main">
	
            <div className="container">
	
              <div className="row">
	
                <div className="col-xs-5 title-container">
	
                  <Title />
	
                </div>
	
                <div className="col-xs-7 form-container">
	
                  <Form getCoin={this.getCoin} />
	
                    <Coin
	
                      price={this.state.price} 
	
                      percentage={this.state.percentage}
	
                     low={this.state.low}
	
                      high={this.state.high}
	
                     error={this.state.error}
	
                    />
	
                  </div>
	
                </div>
	
            </div>
	
          </div>
	
        </div>
	
      </div>
	
    );
	
  }
	
}
	

	
export default App;
 
4 changes: 4 additions & 0 deletions
4 
src/App.test.js


		@@ -0,0 +1,9 @@
	
import React from 'react';
	
import ReactDOM from 'react-dom';
	
import App from './App';
	

	
it('renders without crashing', () => {
	
  const div = document.createElement('div');
	
  ReactDOM.render(<App />, div);
	
  ReactDOM.unmountComponentAtNode(div);
	
});
 
50 changes: 50 additions & 0 deletions
50 
src/components/Coin.js


		@@ -0,0 +1,33 @@
	
import React from "react";
	

	
const Coin = props => (
	
    <div>
	
        <div className="coin__info">
	
	    {	
	
	 	    props.price && <p className="coin__key"> Price: 
	
	 	    	<span className="coin__value"> { props.price }</span>
	
	 	    </p> 
	
	    }
	
	    { 	
	
	 	    props.percentage && <p className="coin__key"> 24 Hour Change %: 
	
	 	    	<span className="coin__value"> { props.percentage }	</span>
	
	    	</p> 
	
	    }
	
	    { 	
	
	    	props.low && <p className="coin__key"> Day Low: 
	
	    		<span className="coin__value"> { props.low } </span>
	
	       	</p> 
	
	    }
	
	    { 	
	
	 	    props.high && <p className="coin__key"> Day High: 
	
	 	    	<span className="coin__value"> { props.high } </span>
	
	    </p> 
	
	    }
	
	    { 
	
	    	props.error && <p className="coin__error">{ props.error }</p>  
	
	    }
	
	    </div>
	
    </div>
	
);
	

	
export default Coin;
 
13 changes: 13 additions & 0 deletions
13  
src/components/Form.js


		@@ -0,0 +1,13 @@
	
import React from "react";
	

	
const Form = props => (
	
        <div>
	
            <form onSubmit={props.getCoin}>
	
		    <input type="text" name="coin" placeholder="Coin eg: BTC.."/>
	
		    <input type="text" name="currency" placeholder="Currency eg: USD..."/>
	
		    <button>Get Coin</button>
	
	        </form>
	
        </div>
	
    );
	

	
export default Form;
 
10 changes: 10 additions & 0 deletions
10  
src/components/Title.js


		@@ -0,0 +1,10 @@
	
import React from "react";
	

	
const Title = () => (
	
<div>
	
    <h1 className="title-container__title">Coin Finder</h1>
	
    <h3 className="title-container__subtitle">Find out price and more...</h3>
	
 </div>
	
);
	

	
export default Title;
 
687 changes: 687 additions & 0 deletions
687  
src/img/liveweave-image.svg





 
5 changes: 5 additions & 0 deletions
5  
src/index.css


		@@ -0,0 +1,5 @@
	
body {
	
  margin: 0;
	
  padding: 0;
	
  font-family: sans-serif;
	
}
 
9 changes: 9 additions & 0 deletions
9  
src/index.js


		@@ -0,0 +1,9 @@
	
import React from 'react';
	
import ReactDOM from 'react-dom';
	
import 'bootstrap/dist/css/bootstrap.min.css';
	
import "./App.css";
	
import App from './App';
	
import registerServiceWorker from './registerServiceWorker';
	

	
ReactDOM.render(<App />, document.getElementById('root'));
	
registerServiceWorker();
 
7 changes: 7 additions & 0 deletions
7  
src/logo.svg





 
117 changes: 117 additions & 0 deletions
117  
src/registerServiceWorker.js


		@@ -0,0 +1,117 @@
	
// In production, we register a service worker to serve assets from local cache.
	

	
// This lets the app load faster on subsequent visits in production, and gives
	
// it offline capabilities. However, it also means that developers (and users)
	
// will only see deployed updates on the "N+1" visit to a page, since previously
	
// cached resources are updated in the background.
	

	
// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.
	
// This link also includes instructions on opting out of this behavior.
	

	
const isLocalhost = Boolean(
	
  window.location.hostname === 'localhost' ||
	
    // [::1] is the IPv6 localhost address.
	
    window.location.hostname === '[::1]' ||
	
    // 127.0.0.1/8 is considered localhost for IPv4.
	
    window.location.hostname.match(
	
      /^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/
	
    )
	
);
	

	
export default function register() {
	
  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {
	
    // The URL constructor is available in all browsers that support SW.
	
    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);
	
    if (publicUrl.origin !== window.location.origin) {
	
      // Our service worker won't work if PUBLIC_URL is on a different origin
	
      // from what our page is served on. This might happen if a CDN is used to
	
      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374
	
      return;
	
    }
	

	
    window.addEventListener('load', () => {
	
      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;
	

	
      if (isLocalhost) {
	
        // This is running on localhost. Lets check if a service worker still exists or not.
	
        checkValidServiceWorker(swUrl);
	

	
        // Add some additional logging to localhost, pointing developers to the
	
        // service worker/PWA documentation.
	
        navigator.serviceWorker.ready.then(() => {
	
          console.log(
	
            'This web app is being served cache-first by a service ' +
	
              'worker. To learn more, visit https://goo.gl/SC7cgQ'
	
          );
	
        });
	
      } else {
	
        // Is not local host. Just register service worker
	
        registerValidSW(swUrl);
	
      }
	
    });
	
  }
	
}
	

	
function registerValidSW(swUrl) {
	
  navigator.serviceWorker
	
    .register(swUrl)
	
    .then(registration => {
	
      registration.onupdatefound = () => {
	
        const installingWorker = registration.installing;
	
        installingWorker.onstatechange = () => {
	
          if (installingWorker.state === 'installed') {
	
            if (navigator.serviceWorker.controller) {
	
              // At this point, the old content will have been purged and
	
              // the fresh content will have been added to the cache.
	
              // It's the perfect time to display a "New content is
	
              // available; please refresh." message in your web app.
	
              console.log('New content is available; please refresh.');
	
            } else {
	
              // At this point, everything has been precached.
	
              // It's the perfect time to display a
	
              // "Content is cached for offline use." message.
	
              console.log('Content is cached for offline use.');
	
            }
	
          }
	
        };
	
      };
	
    })
	
    .catch(error => {
	
      console.error('Error during service worker registration:', error);
	
    });
	
}
	

	
function checkValidServiceWorker(swUrl) {
	
  // Check if the service worker can be found. If it can't reload the page.
	
  fetch(swUrl)
	
    .then(response => {
	
      // Ensure service worker exists, and that we really are getting a JS file.
	
      if (
	
        response.status === 404 ||
	
        response.headers.get('content-type').indexOf('javascript') === -1
	
      ) {
	
        // No service worker found. Probably a different app. Reload the page.
	
        navigator.serviceWorker.ready.then(registration => {
	
          registration.unregister().then(() => {
	
            window.location.reload();
	
          });
	
        });
	
      } else {
	
        // Service worker found. Proceed as normal.
	
        registerValidSW(swUrl);
	
      }
	
    })
	
    .catch(() => {
	
      console.log(
	
        'No internet connection found. App is running in offline mode.'
	
      );
	
    });
	
}
	

	
export function unregister() {
	
  if ('serviceWorker' in navigator) {
	
    navigator.serviceWorker.ready.then(registration => {
	
      registration.unregister();
	
    });
	
  }
	
}
